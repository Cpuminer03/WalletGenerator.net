(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[14],{

/***/ "./src/autogen/modernizr.js":
/*!**********************************!*\
  !*** ./src/autogen/modernizr.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * modernizr v3.11.4\n * Build https://modernizr.com/download?-canvas-svg-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n *  Veeck\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n;\n\n(function (scriptGlobalObject, window, document, undefined) {\n  var tests = [];\n  /**\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    _version: '3.11.4',\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n    // Queue of tests\n    _q: [],\n    // Stub these for people who are listening\n    on: function (test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function () {\n        cb(self[test]);\n      }, 0);\n    },\n    addTest: function (name, fn, options) {\n      tests.push({\n        name: name,\n        fn: fn,\n        options: options\n      });\n    },\n    addAsyncTest: function (fn) {\n      tests.push({\n        name: null,\n        fn: fn\n      });\n    }\n  }; // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n\n  var Modernizr = function () {};\n\n  Modernizr.prototype = ModernizrProto; // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n\n  Modernizr = new Modernizr();\n  var classes = [];\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean} true if the typeof the first parameter is exactly the specified type, false otherwise\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n\n  ;\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   * @returns {void}\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx]; // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        } // Run the test, or use the raw value if it's not a function\n\n\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn; // Set each of the names on the Modernizr object\n\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx]; // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already or if it doesnt exist yet (like inputtypes)\n            if (!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n\n  ;\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n  /*!\n  {\n    \"name\": \"Canvas\",\n    \"property\": \"canvas\",\n    \"caniuse\": \"canvas\",\n    \"tags\": [\"canvas\", \"graphics\"],\n    \"polyfills\": [\"flashcanvas\", \"excanvas\", \"slcanvas\", \"fxcanvas\"]\n  }\n  !*/\n\n  /* DOC\n  Detects support for the `<canvas>` element for 2D drawing.\n  */\n  // On the S60 and BB Storm, getContext exists, but always returns undefined\n  // so we actually have to call getContext() to verify\n  // github.com/Modernizr/Modernizr/issues/issue/97/\n\n  Modernizr.addTest('canvas', function () {\n    var elem = createElement('canvas');\n    return !!(elem.getContext && elem.getContext('2d'));\n  });\n  /*!\n  {\n    \"name\": \"SVG\",\n    \"property\": \"svg\",\n    \"caniuse\": \"svg\",\n    \"tags\": [\"svg\"],\n    \"authors\": [\"Erik Dahlstrom\"],\n    \"polyfills\": [\n      \"svgweb\",\n      \"raphael\",\n      \"amplesdk\",\n      \"canvg\",\n      \"svg-boilerplate\",\n      \"sie\",\n      \"dojogfx\",\n      \"fabricjs\"\n    ]\n  }\n  !*/\n\n  /* DOC\n  Detects support for SVG in `<embed>` or `<object>` elements.\n  */\n\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect); // Run each test\n\n  testRunner();\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest; // Run the things that are supposed to run after the tests\n\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  } // Leak Modernizr namespace\n\n\n  scriptGlobalObject.Modernizr = Modernizr;\n  ;\n})(module.exports, window, document);\n\n//# sourceURL=webpack:///./src/autogen/modernizr.js?");

/***/ }),

/***/ "./src/ninja.qrcode/index.js":
/*!***********************************!*\
  !*** ./src/ninja.qrcode/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const QRCode = __webpack_require__(/*! ./../qrcode.js */ \"./src/qrcode.js\");\n\nconst sizeMultiplier_ = __webpack_require__(/*! ./sizemultiplier */ \"./src/ninja.qrcode/sizemultiplier.js\");\n\nconst renderers = [__webpack_require__(/*! ./renderer/svg */ \"./src/ninja.qrcode/renderer/svg.js\"), __webpack_require__(/*! ./renderer/canvas */ \"./src/ninja.qrcode/renderer/canvas.js\"), __webpack_require__(/*! ./renderer/table */ \"./src/ninja.qrcode/renderer/table.js\")]; // determine which type number is big enough for the input text length\n\nconst getTypeNumber = function (text) {\n  const lengthCalculation = text.length * 8 + 12; // length as calculated by the QRCode\n\n  if (lengthCalculation < 72) {\n    return 1;\n  } else if (lengthCalculation < 128) {\n    return 2;\n  } else if (lengthCalculation < 208) {\n    return 3;\n  } else if (lengthCalculation < 288) {\n    return 4;\n  } else if (lengthCalculation < 368) {\n    return 5;\n  } else if (lengthCalculation < 480) {\n    return 6;\n  } else if (lengthCalculation < 528) {\n    return 7;\n  } else if (lengthCalculation < 688) {\n    return 8;\n  } else if (lengthCalculation < 800) {\n    return 9;\n  } else if (lengthCalculation < 976) {\n    return 10;\n  }\n\n  return null;\n}; // show QRCodes with canvas OR table (IE8)\n// parameter: keyValuePair\n// example: { \"id1\": \"string1\", \"id2\": \"string2\"}\n//\t\t\"id1\" is the id of a div element where you want a QRCode inserted.\n//\t\t\"string1\" is the string you want encoded into the QRCode.\n\n\nconst showQrCode = function (keyValuePair, sizeMultiplier) {\n  for (const key in keyValuePair) {\n    if ({}.hasOwnProperty.call(keyValuePair, key)) {\n      const value = keyValuePair[key];\n      const typeNumber = getTypeNumber(value);\n      const qrcode = QRCode(typeNumber, \"H\");\n      qrcode.addData(value);\n      qrcode.make();\n      const newSizeMultiplier = sizeMultiplier_.calculateFinalSizeMultiplier(sizeMultiplier, qrcode.getModuleCount());\n      const parent = document.getElementById(key);\n      parent.textContent = \"\";\n\n      for (const {\n        render,\n        available\n      } of renderers) {\n        if (available) {\n          parent.appendChild(render(qrcode, newSizeMultiplier));\n          break;\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  getTypeNumber,\n  showQrCode,\n  sizeMultiplier: sizeMultiplier_\n};\n\n//# sourceURL=webpack:///./src/ninja.qrcode/index.js?");

/***/ }),

/***/ "./src/ninja.qrcode/renderer/canvas.js":
/*!*********************************************!*\
  !*** ./src/ninja.qrcode/renderer/canvas.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n  Modernizr\n} = __webpack_require__(/*! ./../../autogen/modernizr */ \"./src/autogen/modernizr.js\");\n\nconst render = function (qrcode, sizeMultiplier) {\n  const modCount = qrcode.getModuleCount();\n  const size = modCount * sizeMultiplier; // create canvas element\n\n  const canvas = document.createElement(\"canvas\");\n  const scale = 10.0;\n  canvas.width = size * scale;\n  canvas.height = size * scale;\n  canvas.style.width = size + \"px\";\n  canvas.style.height = size + \"px\";\n  const ctx = canvas.getContext(\"2d\");\n  ctx.scale(scale, scale); // compute tileW/tileH based on width/height\n\n  const tile = sizeMultiplier; // draw in the canvas\n\n  for (let row = 0; row < modCount; row++) {\n    for (let col = 0; col < modCount; col++) {\n      ctx.fillStyle = qrcode.isDark(row, col) ? \"#000000\" : \"#ffffff\";\n      ctx.fillRect(col * tile, row * tile, tile, tile);\n    }\n  } // return just built canvas\n\n\n  return canvas;\n};\n\nmodule.exports = {\n  render,\n  available: Modernizr.canvas\n};\n\n//# sourceURL=webpack:///./src/ninja.qrcode/renderer/canvas.js?");

/***/ }),

/***/ "./src/ninja.qrcode/renderer/svg.js":
/*!******************************************!*\
  !*** ./src/ninja.qrcode/renderer/svg.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const BN = __webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.js\");\n\nconst {\n  Modernizr\n} = __webpack_require__(/*! ./../../autogen/modernizr */ \"./src/autogen/modernizr.js\");\n\nconst render = function (qr, sizeMultiplier) {\n  // https://stackoverflow.com/questions/20539196/creating-svg-elements-dynamically-with-javascript-inside-html\n  const modCount = qr.getModuleCount();\n  const size = +new BN(modCount).times(sizeMultiplier);\n  const ns = \"http://www.w3.org/2000/svg\";\n\n  function getNode(n, v) {\n    n = document.createElementNS(ns, n);\n\n    for (const p in v) {\n      if ({}.hasOwnProperty.call(v, p)) {\n        n.setAttributeNS(null, p, v[p]);\n      }\n    }\n\n    return n;\n  }\n\n  let root = getNode(\"svg\");\n  root.style.width = size + \"px\";\n  root.style.height = size + \"px\";\n  root.appendChild(getNode(\"rect\", {\n    x: 0,\n    y: 0,\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"#fff\"\n  }));\n  const rect = \"l\" + sizeMultiplier + \",0 0,\" + sizeMultiplier + \" -\" + sizeMultiplier + \",0 0,-\" + sizeMultiplier + \"z \";\n  let path = \"\";\n\n  for (let r = 0; r < modCount; r += 1) {\n    const mr = +new BN(r).times(sizeMultiplier);\n\n    for (let c = 0; c < modCount; c += 1) {\n      if (qr.isDark(r, c)) {\n        const mc = +new BN(c).times(sizeMultiplier);\n        path += \"M\" + mc + \",\" + mr + rect;\n      }\n    }\n  }\n\n  root.appendChild(getNode(\"path\", {\n    d: path,\n    stroke: \"transparent\",\n    fill: \"#000\"\n  }));\n  return root;\n};\n\nmodule.exports = {\n  render,\n  available: Modernizr.svg\n};\n\n//# sourceURL=webpack:///./src/ninja.qrcode/renderer/svg.js?");

/***/ }),

/***/ "./src/ninja.qrcode/renderer/table.js":
/*!********************************************!*\
  !*** ./src/ninja.qrcode/renderer/table.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const render = function (qr) {\n  const modCount = qr.getModuleCount();\n\n  function getNode(n, v) {\n    n = document.createElement(n);\n\n    for (const p in v) {\n      if ({}.hasOwnProperty.call(v, p)) {\n        n.setAttribute(p, v[p]);\n      }\n    }\n\n    return n;\n  }\n\n  const root = getNode(\"table\", {\n    class: \"qrcodetable\"\n  });\n\n  for (let r = 0; r < modCount; r++) {\n    const tr = getNode(\"tr\");\n\n    for (let c = 0; c < modCount; c++) {\n      if (qr.isDark(r, c)) {\n        tr.appendChild(getNode(\"td\", {\n          class: \"qrcodetddark\"\n        }));\n      } else {\n        tr.appendChild(getNode(\"td\", {\n          class: \"qrcodetdlight\"\n        }));\n      }\n    }\n\n    root.appendChild(tr);\n  }\n\n  return root;\n};\n\nmodule.exports = {\n  render,\n  available: true\n};\n\n//# sourceURL=webpack:///./src/ninja.qrcode/renderer/table.js?");

/***/ }),

/***/ "./src/ninja.qrcode/sizemultiplier.js":
/*!********************************************!*\
  !*** ./src/ninja.qrcode/sizemultiplier.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const constant = sm => sm;\n\nconst proportional = (moduleCount, sizeMultiplier) => ({\n  mode: \"proportional\",\n  moduleCount,\n  sizeMultiplier\n});\n\nconst calculateFinalSizeMultiplier = (sizeMultiplier, moduleCount) => {\n  if (sizeMultiplier === null || sizeMultiplier === undefined) {\n    // default\n    return 2;\n  } else if (typeof sizeMultiplier === \"number\") {\n    // constant\n    return sizeMultiplier;\n  } else if (typeof sizeMultiplier === \"object\" && sizeMultiplier.mode === \"proportional\") {\n    // proportional\n    return sizeMultiplier.sizeMultiplier * sizeMultiplier.moduleCount / moduleCount;\n  }\n};\n\nmodule.exports = {\n  constant,\n  proportional,\n  calculateFinalSizeMultiplier\n};\n\n//# sourceURL=webpack:///./src/ninja.qrcode/sizemultiplier.js?");

/***/ }),

/***/ "./src/qrcode.js":
/*!***********************!*\
  !*** ./src/qrcode.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint no-shadow:0,block-scoped-var:0,no-redeclare:0,no-undef:0\n   no-var:0,eqeqeq:0,no-constant-condition:0,no-eq-null:0 */\n//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\nvar qrcode = function () {\n  //---------------------------------------------------------------------\n  // qrcode\n  //---------------------------------------------------------------------\n\n  /**\n   * qrcode\n   * @param typeNumber 1 to 40\n   * @param errorCorrectionLevel 'L','M','Q','H'\n   */\n  var qrcode = function (typeNumber, errorCorrectionLevel) {\n    var PAD0 = 0xec;\n    var PAD1 = 0x11;\n    var _typeNumber = typeNumber;\n    var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n    var _modules = null;\n    var _moduleCount = 0;\n    var _dataCache = null;\n    var _dataList = [];\n    var _this = {};\n\n    var makeImpl = function (test, maskPattern) {\n      _moduleCount = _typeNumber * 4 + 17;\n\n      _modules = function (moduleCount) {\n        var modules = new Array(moduleCount);\n\n        for (var row = 0; row < moduleCount; row += 1) {\n          modules[row] = new Array(moduleCount);\n\n          for (var col = 0; col < moduleCount; col += 1) {\n            modules[row][col] = null;\n          }\n        }\n\n        return modules;\n      }(_moduleCount);\n\n      setupPositionProbePattern(0, 0);\n      setupPositionProbePattern(_moduleCount - 7, 0);\n      setupPositionProbePattern(0, _moduleCount - 7);\n      setupPositionAdjustPattern();\n      setupTimingPattern();\n      setupTypeInfo(test, maskPattern);\n\n      if (_typeNumber >= 7) {\n        setupTypeNumber(test);\n      }\n\n      if (_dataCache == null) {\n        _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n      }\n\n      mapData(_dataCache, maskPattern);\n    };\n\n    var setupPositionProbePattern = function (row, col) {\n      for (var r = -1; r <= 7; r += 1) {\n        if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n        for (var c = -1; c <= 7; c += 1) {\n          if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            _modules[row + r][col + c] = true;\n          } else {\n            _modules[row + r][col + c] = false;\n          }\n        }\n      }\n    };\n\n    var getBestMaskPattern = function () {\n      var minLostPoint = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < 8; i += 1) {\n        makeImpl(true, i);\n        var lostPoint = QRUtil.getLostPoint(_this);\n\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n\n      return pattern;\n    };\n\n    var setupTimingPattern = function () {\n      for (var r = 8; r < _moduleCount - 8; r += 1) {\n        if (_modules[r][6] != null) {\n          continue;\n        }\n\n        _modules[r][6] = r % 2 == 0;\n      }\n\n      for (var c = 8; c < _moduleCount - 8; c += 1) {\n        if (_modules[6][c] != null) {\n          continue;\n        }\n\n        _modules[6][c] = c % 2 == 0;\n      }\n    };\n\n    var setupPositionAdjustPattern = function () {\n      var pos = QRUtil.getPatternPosition(_typeNumber);\n\n      for (var i = 0; i < pos.length; i += 1) {\n        for (var j = 0; j < pos.length; j += 1) {\n          var row = pos[i];\n          var col = pos[j];\n\n          if (_modules[row][col] != null) {\n            continue;\n          }\n\n          for (var r = -2; r <= 2; r += 1) {\n            for (var c = -2; c <= 2; c += 1) {\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                _modules[row + r][col + c] = true;\n              } else {\n                _modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    var setupTypeNumber = function (test) {\n      var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n      }\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    };\n\n    var setupTypeInfo = function (test, maskPattern) {\n      var data = _errorCorrectionLevel << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data); // vertical\n\n      for (var i = 0; i < 15; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 6) {\n          _modules[i][8] = mod;\n        } else if (i < 8) {\n          _modules[i + 1][8] = mod;\n        } else {\n          _modules[_moduleCount - 15 + i][8] = mod;\n        }\n      } // horizontal\n\n\n      for (var i = 0; i < 15; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 8) {\n          _modules[8][_moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          _modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          _modules[8][15 - i - 1] = mod;\n        }\n      } // fixed module\n\n\n      _modules[_moduleCount - 8][8] = !test;\n    };\n\n    var mapData = function (data, maskPattern) {\n      var inc = -1;\n      var row = _moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      var maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n      for (var col = _moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col -= 1;\n\n        while (true) {\n          for (var c = 0; c < 2; c += 1) {\n            if (_modules[row][col - c] == null) {\n              var dark = false;\n\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n\n              var mask = maskFunc(row, col - c);\n\n              if (mask) {\n                dark = !dark;\n              }\n\n              _modules[row][col - c] = dark;\n              bitIndex -= 1;\n\n              if (bitIndex == -1) {\n                byteIndex += 1;\n                bitIndex = 7;\n              }\n            }\n          }\n\n          row += inc;\n\n          if (row < 0 || _moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    };\n\n    var createBytes = function (buffer, rsBlocks) {\n      var offset = 0;\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n\n      for (var r = 0; r < rsBlocks.length; r += 1) {\n        var dcCount = rsBlocks[r].dataCount;\n        var ecCount = rsBlocks[r].totalCount - dcCount;\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n        dcdata[r] = new Array(dcCount);\n\n        for (var i = 0; i < dcdata[r].length; i += 1) {\n          dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n        }\n\n        offset += dcCount;\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n\n        for (var i = 0; i < ecdata[r].length; i += 1) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n        }\n      }\n\n      var totalCodeCount = 0;\n\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalCodeCount += rsBlocks[i].totalCount;\n      }\n\n      var data = new Array(totalCodeCount);\n      var index = 0;\n\n      for (var i = 0; i < maxDcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < dcdata[r].length) {\n            data[index] = dcdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      for (var i = 0; i < maxEcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < ecdata[r].length) {\n            data[index] = ecdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      return data;\n    };\n\n    var createData = function (typeNumber, errorCorrectionLevel, dataList) {\n      var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n      var buffer = qrBitBuffer();\n\n      for (var i = 0; i < dataList.length; i += 1) {\n        var data = dataList[i];\n        buffer.put(data.getMode(), 4);\n        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n        data.write(buffer);\n      } // calc num max data.\n\n\n      var totalDataCount = 0;\n\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      if (buffer.getLengthInBits() > totalDataCount * 8) {\n        throw \"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\";\n      } // end code\n\n\n      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n        buffer.put(0, 4);\n      } // padding\n\n\n      while (buffer.getLengthInBits() % 8 != 0) {\n        buffer.putBit(false);\n      } // padding\n\n\n      while (true) {\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n\n        buffer.put(PAD0, 8);\n\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n\n        buffer.put(PAD1, 8);\n      }\n\n      return createBytes(buffer, rsBlocks);\n    };\n\n    _this.addData = function (data, mode) {\n      mode = mode || \"Byte\";\n      var newData = null;\n\n      switch (mode) {\n        case \"Numeric\":\n          newData = qrNumber(data);\n          break;\n\n        case \"Alphanumeric\":\n          newData = qrAlphaNum(data);\n          break;\n\n        case \"Byte\":\n          newData = qr8BitByte(data);\n          break;\n\n        case \"Kanji\":\n          newData = qrKanji(data);\n          break;\n\n        default:\n          throw \"mode:\" + mode;\n      }\n\n      _dataList.push(newData);\n\n      _dataCache = null;\n    };\n\n    _this.isDark = function (row, col) {\n      if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n        throw row + \",\" + col;\n      }\n\n      return _modules[row][col];\n    };\n\n    _this.getModuleCount = function () {\n      return _moduleCount;\n    };\n\n    _this.make = function () {\n      if (_typeNumber < 1) {\n        var typeNumber = 1;\n\n        for (; typeNumber < 40; typeNumber++) {\n          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n          var buffer = qrBitBuffer();\n\n          for (var i = 0; i < _dataList.length; i++) {\n            var data = _dataList[i];\n            buffer.put(data.getMode(), 4);\n            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n            data.write(buffer);\n          }\n\n          var totalDataCount = 0;\n\n          for (var i = 0; i < rsBlocks.length; i++) {\n            totalDataCount += rsBlocks[i].dataCount;\n          }\n\n          if (buffer.getLengthInBits() <= totalDataCount * 8) {\n            break;\n          }\n        }\n\n        _typeNumber = typeNumber;\n      }\n\n      makeImpl(false, getBestMaskPattern());\n    };\n\n    _this.createTableTag = function (cellSize, margin) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n      var qrHtml = \"\";\n      qrHtml += '<table style=\"';\n      qrHtml += \" border-width: 0px; border-style: none;\";\n      qrHtml += \" border-collapse: collapse;\";\n      qrHtml += \" padding: 0px; margin: \" + margin + \"px;\";\n      qrHtml += '\">';\n      qrHtml += \"<tbody>\";\n\n      for (var r = 0; r < _this.getModuleCount(); r += 1) {\n        qrHtml += \"<tr>\";\n\n        for (var c = 0; c < _this.getModuleCount(); c += 1) {\n          qrHtml += '<td style=\"';\n          qrHtml += \" border-width: 0px; border-style: none;\";\n          qrHtml += \" border-collapse: collapse;\";\n          qrHtml += \" padding: 0px; margin: 0px;\";\n          qrHtml += \" width: \" + cellSize + \"px;\";\n          qrHtml += \" height: \" + cellSize + \"px;\";\n          qrHtml += \" background-color: \";\n          qrHtml += _this.isDark(r, c) ? \"#000000\" : \"#ffffff\";\n          qrHtml += \";\";\n          qrHtml += '\"/>';\n        }\n\n        qrHtml += \"</tr>\";\n      }\n\n      qrHtml += \"</tbody>\";\n      qrHtml += \"</table>\";\n      return qrHtml;\n    };\n\n    _this.createSvgTag = function (cellSize, margin, alt, title) {\n      var opts = {};\n\n      if (typeof arguments[0] == \"object\") {\n        // Called by options.\n        opts = arguments[0]; // overwrite cellSize and margin.\n\n        cellSize = opts.cellSize;\n        margin = opts.margin;\n        alt = opts.alt;\n        title = opts.title;\n      }\n\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin; // Compose alt property surrogate\n\n      alt = typeof alt === \"string\" ? {\n        text: alt\n      } : alt || {};\n      alt.text = alt.text || null;\n      alt.id = alt.text ? alt.id || \"qrcode-description\" : null; // Compose title property surrogate\n\n      title = typeof title === \"string\" ? {\n        text: title\n      } : title || {};\n      title.text = title.text || null;\n      title.id = title.text ? title.id || \"qrcode-title\" : null;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var c,\n          mc,\n          r,\n          mr,\n          qrSvg = \"\",\n          rect;\n      rect = \"l\" + cellSize + \",0 0,\" + cellSize + \" -\" + cellSize + \",0 0,-\" + cellSize + \"z \";\n      qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n      qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : \"\";\n      qrSvg += ' viewBox=\"0 0 ' + size + \" \" + size + '\" ';\n      qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n      qrSvg += title.text || alt.text ? ' role=\"img\" aria-labelledby=\"' + escapeXml([title.id, alt.id].join(\" \").trim()) + '\"' : \"\";\n      qrSvg += \">\";\n      qrSvg += title.text ? '<title id=\"' + escapeXml(title.id) + '\">' + escapeXml(title.text) + \"</title>\" : \"\";\n      qrSvg += alt.text ? '<description id=\"' + escapeXml(alt.id) + '\">' + escapeXml(alt.text) + \"</description>\" : \"\";\n      qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n      qrSvg += '<path d=\"';\n\n      for (r = 0; r < _this.getModuleCount(); r += 1) {\n        mr = r * cellSize + margin;\n\n        for (c = 0; c < _this.getModuleCount(); c += 1) {\n          if (_this.isDark(r, c)) {\n            mc = c * cellSize + margin;\n            qrSvg += \"M\" + mc + \",\" + mr + rect;\n          }\n        }\n      }\n\n      qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n      qrSvg += \"</svg>\";\n      return qrSvg;\n    };\n\n    _this.createDataURL = function (cellSize, margin) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n      return createDataURL(size, size, function (x, y) {\n        if (min <= x && x < max && min <= y && y < max) {\n          var c = Math.floor((x - min) / cellSize);\n          var r = Math.floor((y - min) / cellSize);\n          return _this.isDark(r, c) ? 0 : 1;\n        } else {\n          return 1;\n        }\n      });\n    };\n\n    _this.createImgTag = function (cellSize, margin, alt) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var img = \"\";\n      img += \"<img\";\n      img += '\\u0020src=\"';\n      img += _this.createDataURL(cellSize, margin);\n      img += '\"';\n      img += '\\u0020width=\"';\n      img += size;\n      img += '\"';\n      img += '\\u0020height=\"';\n      img += size;\n      img += '\"';\n\n      if (alt) {\n        img += '\\u0020alt=\"';\n        img += escapeXml(alt);\n        img += '\"';\n      }\n\n      img += \"/>\";\n      return img;\n    };\n\n    var escapeXml = function (s) {\n      var escaped = \"\";\n\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charAt(i);\n\n        switch (c) {\n          case \"<\":\n            escaped += \"&lt;\";\n            break;\n\n          case \">\":\n            escaped += \"&gt;\";\n            break;\n\n          case \"&\":\n            escaped += \"&amp;\";\n            break;\n\n          case '\"':\n            escaped += \"&quot;\";\n            break;\n\n          default:\n            escaped += c;\n            break;\n        }\n      }\n\n      return escaped;\n    };\n\n    var _createHalfASCII = function (margin) {\n      var cellSize = 1;\n      margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n      var y, x, r1, r2, p;\n      var blocks = {\n        \"██\": \"█\",\n        \"█ \": \"▀\",\n        \" █\": \"▄\",\n        \"  \": \" \"\n      };\n      var blocksLastLineNoMargin = {\n        \"██\": \"▀\",\n        \"█ \": \"▀\",\n        \" █\": \" \",\n        \"  \": \" \"\n      };\n      var ascii = \"\";\n\n      for (y = 0; y < size; y += 2) {\n        r1 = Math.floor((y - min) / cellSize);\n        r2 = Math.floor((y + 1 - min) / cellSize);\n\n        for (x = 0; x < size; x += 1) {\n          p = \"█\";\n\n          if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n            p = \" \";\n          }\n\n          if (min <= x && x < max && min <= y + 1 && y + 1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n            p += \" \";\n          } else {\n            p += \"█\";\n          } // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n\n\n          ascii += margin < 1 && y + 1 >= max ? blocksLastLineNoMargin[p] : blocks[p];\n        }\n\n        ascii += \"\\n\";\n      }\n\n      if (size % 2 && margin > 0) {\n        return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join(\"▀\");\n      }\n\n      return ascii.substring(0, ascii.length - 1);\n    };\n\n    _this.createASCII = function (cellSize, margin) {\n      cellSize = cellSize || 1;\n\n      if (cellSize < 2) {\n        return _createHalfASCII(margin);\n      }\n\n      cellSize -= 1;\n      margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n      var y, x, r, p;\n      var white = Array(cellSize + 1).join(\"██\");\n      var black = Array(cellSize + 1).join(\"  \");\n      var ascii = \"\";\n      var line = \"\";\n\n      for (y = 0; y < size; y += 1) {\n        r = Math.floor((y - min) / cellSize);\n        line = \"\";\n\n        for (x = 0; x < size; x += 1) {\n          p = 1;\n\n          if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n            p = 0;\n          } // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n\n\n          line += p ? white : black;\n        }\n\n        for (r = 0; r < cellSize; r += 1) {\n          ascii += line + \"\\n\";\n        }\n      }\n\n      return ascii.substring(0, ascii.length - 1);\n    };\n\n    _this.renderTo2dContext = function (context, cellSize) {\n      cellSize = cellSize || 2;\n\n      var length = _this.getModuleCount();\n\n      for (var row = 0; row < length; row++) {\n        for (var col = 0; col < length; col++) {\n          context.fillStyle = _this.isDark(row, col) ? \"black\" : \"white\";\n          context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n        }\n      }\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // qrcode.stringToBytes\n  //---------------------------------------------------------------------\n\n\n  qrcode.stringToBytesFuncs = {\n    default: function (s) {\n      var bytes = [];\n\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        bytes.push(c & 0xff);\n      }\n\n      return bytes;\n    }\n  };\n  qrcode.stringToBytes = qrcode.stringToBytesFuncs[\"default\"]; //---------------------------------------------------------------------\n  // qrcode.createStringToBytes\n  //---------------------------------------------------------------------\n\n  /**\n   * @param unicodeData base64 string of byte array.\n   * [16bit Unicode],[16bit Bytes], ...\n   * @param numChars\n   */\n\n  qrcode.createStringToBytes = function (unicodeData, numChars) {\n    // create conversion map.\n    var unicodeMap = function () {\n      var bin = base64DecodeInputStream(unicodeData);\n\n      var read = function () {\n        var b = bin.read();\n        if (b == -1) throw \"eof\";\n        return b;\n      };\n\n      var count = 0;\n      var unicodeMap = {};\n\n      while (true) {\n        var b0 = bin.read();\n        if (b0 == -1) break;\n        var b1 = read();\n        var b2 = read();\n        var b3 = read();\n        var k = String.fromCharCode(b0 << 8 | b1);\n        var v = b2 << 8 | b3;\n        unicodeMap[k] = v;\n        count += 1;\n      }\n\n      if (count != numChars) {\n        throw count + \" != \" + numChars;\n      }\n\n      return unicodeMap;\n    }();\n\n    var unknownChar = \"?\".charCodeAt(0);\n    return function (s) {\n      var bytes = [];\n\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n\n        if (c < 128) {\n          bytes.push(c);\n        } else {\n          var b = unicodeMap[s.charAt(i)];\n\n          if (typeof b == \"number\") {\n            if ((b & 0xff) == b) {\n              // 1byte\n              bytes.push(b);\n            } else {\n              // 2bytes\n              bytes.push(b >>> 8);\n              bytes.push(b & 0xff);\n            }\n          } else {\n            bytes.push(unknownChar);\n          }\n        }\n      }\n\n      return bytes;\n    };\n  }; //---------------------------------------------------------------------\n  // QRMode\n  //---------------------------------------------------------------------\n\n\n  var QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3\n  }; //---------------------------------------------------------------------\n  // QRErrorCorrectionLevel\n  //---------------------------------------------------------------------\n\n  var QRErrorCorrectionLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2\n  }; //---------------------------------------------------------------------\n  // QRMaskPattern\n  //---------------------------------------------------------------------\n\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7\n  }; //---------------------------------------------------------------------\n  // QRUtil\n  //---------------------------------------------------------------------\n\n  var QRUtil = function () {\n    var PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];\n    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n    var _this = {};\n\n    var getBCHDigit = function (data) {\n      var digit = 0;\n\n      while (data != 0) {\n        digit += 1;\n        data >>>= 1;\n      }\n\n      return digit;\n    };\n\n    _this.getBCHTypeInfo = function (data) {\n      var d = data << 10;\n\n      while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n        d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\n      }\n\n      return (data << 10 | d) ^ G15_MASK;\n    };\n\n    _this.getBCHTypeNumber = function (data) {\n      var d = data << 12;\n\n      while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n        d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\n      }\n\n      return data << 12 | d;\n    };\n\n    _this.getPatternPosition = function (typeNumber) {\n      return PATTERN_POSITION_TABLE[typeNumber - 1];\n    };\n\n    _this.getMaskFunction = function (maskPattern) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return function (i, j) {\n            return (i + j) % 2 == 0;\n          };\n\n        case QRMaskPattern.PATTERN001:\n          return function (i, j) {\n            return i % 2 == 0;\n          };\n\n        case QRMaskPattern.PATTERN010:\n          return function (i, j) {\n            return j % 3 == 0;\n          };\n\n        case QRMaskPattern.PATTERN011:\n          return function (i, j) {\n            return (i + j) % 3 == 0;\n          };\n\n        case QRMaskPattern.PATTERN100:\n          return function (i, j) {\n            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n          };\n\n        case QRMaskPattern.PATTERN101:\n          return function (i, j) {\n            return i * j % 2 + i * j % 3 == 0;\n          };\n\n        case QRMaskPattern.PATTERN110:\n          return function (i, j) {\n            return (i * j % 2 + i * j % 3) % 2 == 0;\n          };\n\n        case QRMaskPattern.PATTERN111:\n          return function (i, j) {\n            return (i * j % 3 + (i + j) % 2) % 2 == 0;\n          };\n\n        default:\n          throw \"bad maskPattern:\" + maskPattern;\n      }\n    };\n\n    _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\n      var a = qrPolynomial([1], 0);\n\n      for (var i = 0; i < errorCorrectLength; i += 1) {\n        a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\n      }\n\n      return a;\n    };\n\n    _this.getLengthInBits = function (mode, type) {\n      if (1 <= type && type < 10) {\n        // 1 - 9\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 10;\n\n          case QRMode.MODE_ALPHA_NUM:\n            return 9;\n\n          case QRMode.MODE_8BIT_BYTE:\n            return 8;\n\n          case QRMode.MODE_KANJI:\n            return 8;\n\n          default:\n            throw \"mode:\" + mode;\n        }\n      } else if (type < 27) {\n        // 10 - 26\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 12;\n\n          case QRMode.MODE_ALPHA_NUM:\n            return 11;\n\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n\n          case QRMode.MODE_KANJI:\n            return 10;\n\n          default:\n            throw \"mode:\" + mode;\n        }\n      } else if (type < 41) {\n        // 27 - 40\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 14;\n\n          case QRMode.MODE_ALPHA_NUM:\n            return 13;\n\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n\n          case QRMode.MODE_KANJI:\n            return 12;\n\n          default:\n            throw \"mode:\" + mode;\n        }\n      } else {\n        throw \"type:\" + type;\n      }\n    };\n\n    _this.getLostPoint = function (qrcode) {\n      var moduleCount = qrcode.getModuleCount();\n      var lostPoint = 0; // LEVEL1\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount; col += 1) {\n          var sameCount = 0;\n          var dark = qrcode.isDark(row, col);\n\n          for (var r = -1; r <= 1; r += 1) {\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n\n            for (var c = -1; c <= 1; c += 1) {\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n\n              if (r == 0 && c == 0) {\n                continue;\n              }\n\n              if (dark == qrcode.isDark(row + r, col + c)) {\n                sameCount += 1;\n              }\n            }\n          }\n\n          if (sameCount > 5) {\n            lostPoint += 3 + sameCount - 5;\n          }\n        }\n      } // LEVEL2\n\n\n      for (var row = 0; row < moduleCount - 1; row += 1) {\n        for (var col = 0; col < moduleCount - 1; col += 1) {\n          var count = 0;\n          if (qrcode.isDark(row, col)) count += 1;\n          if (qrcode.isDark(row + 1, col)) count += 1;\n          if (qrcode.isDark(row, col + 1)) count += 1;\n          if (qrcode.isDark(row + 1, col + 1)) count += 1;\n\n          if (count == 0 || count == 4) {\n            lostPoint += 3;\n          }\n        }\n      } // LEVEL3\n\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount - 6; col += 1) {\n          if (qrcode.isDark(row, col) && !qrcode.isDark(row, col + 1) && qrcode.isDark(row, col + 2) && qrcode.isDark(row, col + 3) && qrcode.isDark(row, col + 4) && !qrcode.isDark(row, col + 5) && qrcode.isDark(row, col + 6)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount - 6; row += 1) {\n          if (qrcode.isDark(row, col) && !qrcode.isDark(row + 1, col) && qrcode.isDark(row + 2, col) && qrcode.isDark(row + 3, col) && qrcode.isDark(row + 4, col) && !qrcode.isDark(row + 5, col) && qrcode.isDark(row + 6, col)) {\n            lostPoint += 40;\n          }\n        }\n      } // LEVEL4\n\n\n      var darkCount = 0;\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount; row += 1) {\n          if (qrcode.isDark(row, col)) {\n            darkCount += 1;\n          }\n        }\n      }\n\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    };\n\n    return _this;\n  }(); //---------------------------------------------------------------------\n  // QRMath\n  //---------------------------------------------------------------------\n\n\n  var QRMath = function () {\n    var EXP_TABLE = new Array(256);\n    var LOG_TABLE = new Array(256); // initialize tables\n\n    for (var i = 0; i < 8; i += 1) {\n      EXP_TABLE[i] = 1 << i;\n    }\n\n    for (var i = 8; i < 256; i += 1) {\n      EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n    }\n\n    for (var i = 0; i < 255; i += 1) {\n      LOG_TABLE[EXP_TABLE[i]] = i;\n    }\n\n    var _this = {};\n\n    _this.glog = function (n) {\n      if (n < 1) {\n        throw \"glog(\" + n + \")\";\n      }\n\n      return LOG_TABLE[n];\n    };\n\n    _this.gexp = function (n) {\n      while (n < 0) {\n        n += 255;\n      }\n\n      while (n >= 256) {\n        n -= 255;\n      }\n\n      return EXP_TABLE[n];\n    };\n\n    return _this;\n  }(); //---------------------------------------------------------------------\n  // qrPolynomial\n  //---------------------------------------------------------------------\n\n\n  function qrPolynomial(num, shift) {\n    if (typeof num.length == \"undefined\") {\n      throw num.length + \"/\" + shift;\n    }\n\n    var _num = function () {\n      var offset = 0;\n\n      while (offset < num.length && num[offset] == 0) {\n        offset += 1;\n      }\n\n      var _num = new Array(num.length - offset + shift);\n\n      for (var i = 0; i < num.length - offset; i += 1) {\n        _num[i] = num[i + offset];\n      }\n\n      return _num;\n    }();\n\n    var _this = {};\n\n    _this.getAt = function (index) {\n      return _num[index];\n    };\n\n    _this.getLength = function () {\n      return _num.length;\n    };\n\n    _this.multiply = function (e) {\n      var num = new Array(_this.getLength() + e.getLength() - 1);\n\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        for (var j = 0; j < e.getLength(); j += 1) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\n        }\n      }\n\n      return qrPolynomial(num, 0);\n    };\n\n    _this.mod = function (e) {\n      if (_this.getLength() - e.getLength() < 0) {\n        return _this;\n      }\n\n      var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n      var num = new Array(_this.getLength());\n\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        num[i] = _this.getAt(i);\n      }\n\n      for (var i = 0; i < e.getLength(); i += 1) {\n        num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n      } // recursive call\n\n\n      return qrPolynomial(num, 0).mod(e);\n    };\n\n    return _this;\n  } //---------------------------------------------------------------------\n  // QRRSBlock\n  //---------------------------------------------------------------------\n\n\n  var QRRSBlock = function () {\n    var RS_BLOCK_TABLE = [// L\n    // M\n    // Q\n    // H\n    // 1\n    [1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2\n    [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3\n    [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4\n    [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5\n    [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6\n    [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7\n    [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8\n    [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9\n    [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10\n    [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11\n    [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12\n    [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13\n    [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14\n    [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15\n    [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], // 16\n    [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17\n    [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18\n    [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19\n    [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20\n    [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21\n    [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22\n    [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23\n    [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24\n    [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25\n    [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26\n    [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27\n    [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28\n    [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29\n    [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30\n    [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31\n    [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32\n    [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33\n    [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34\n    [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35\n    [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36\n    [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37\n    [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38\n    [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39\n    [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40\n    [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\n    var qrRSBlock = function (totalCount, dataCount) {\n      var _this = {};\n      _this.totalCount = totalCount;\n      _this.dataCount = dataCount;\n      return _this;\n    };\n\n    var _this = {};\n\n    var getRsBlockTable = function (typeNumber, errorCorrectionLevel) {\n      switch (errorCorrectionLevel) {\n        case QRErrorCorrectionLevel.L:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n        case QRErrorCorrectionLevel.M:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n        case QRErrorCorrectionLevel.Q:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n        case QRErrorCorrectionLevel.H:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n        default:\n          return undefined;\n      }\n    };\n\n    _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {\n      var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n\n      if (typeof rsBlock == \"undefined\") {\n        throw \"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectionLevel:\" + errorCorrectionLevel;\n      }\n\n      var length = rsBlock.length / 3;\n      var list = [];\n\n      for (var i = 0; i < length; i += 1) {\n        var count = rsBlock[i * 3 + 0];\n        var totalCount = rsBlock[i * 3 + 1];\n        var dataCount = rsBlock[i * 3 + 2];\n\n        for (var j = 0; j < count; j += 1) {\n          list.push(qrRSBlock(totalCount, dataCount));\n        }\n      }\n\n      return list;\n    };\n\n    return _this;\n  }(); //---------------------------------------------------------------------\n  // qrBitBuffer\n  //---------------------------------------------------------------------\n\n\n  var qrBitBuffer = function () {\n    var _buffer = [];\n    var _length = 0;\n    var _this = {};\n\n    _this.getBuffer = function () {\n      return _buffer;\n    };\n\n    _this.getAt = function (index) {\n      var bufIndex = Math.floor(index / 8);\n      return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n    };\n\n    _this.put = function (num, length) {\n      for (var i = 0; i < length; i += 1) {\n        _this.putBit((num >>> length - i - 1 & 1) == 1);\n      }\n    };\n\n    _this.getLengthInBits = function () {\n      return _length;\n    };\n\n    _this.putBit = function (bit) {\n      var bufIndex = Math.floor(_length / 8);\n\n      if (_buffer.length <= bufIndex) {\n        _buffer.push(0);\n      }\n\n      if (bit) {\n        _buffer[bufIndex] |= 0x80 >>> _length % 8;\n      }\n\n      _length += 1;\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // qrNumber\n  //---------------------------------------------------------------------\n\n\n  var qrNumber = function (data) {\n    var _mode = QRMode.MODE_NUMBER;\n    var _data = data;\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return _data.length;\n    };\n\n    _this.write = function (buffer) {\n      var data = _data;\n      var i = 0;\n\n      while (i + 2 < data.length) {\n        buffer.put(strToNum(data.substring(i, i + 3)), 10);\n        i += 3;\n      }\n\n      if (i < data.length) {\n        if (data.length - i == 1) {\n          buffer.put(strToNum(data.substring(i, i + 1)), 4);\n        } else if (data.length - i == 2) {\n          buffer.put(strToNum(data.substring(i, i + 2)), 7);\n        }\n      }\n    };\n\n    var strToNum = function (s) {\n      var num = 0;\n\n      for (var i = 0; i < s.length; i += 1) {\n        num = num * 10 + chatToNum(s.charAt(i));\n      }\n\n      return num;\n    };\n\n    var chatToNum = function (c) {\n      if (\"0\" <= c && c <= \"9\") {\n        return c.charCodeAt(0) - \"0\".charCodeAt(0);\n      }\n\n      throw \"illegal char :\" + c;\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // qrAlphaNum\n  //---------------------------------------------------------------------\n\n\n  var qrAlphaNum = function (data) {\n    var _mode = QRMode.MODE_ALPHA_NUM;\n    var _data = data;\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return _data.length;\n    };\n\n    _this.write = function (buffer) {\n      var s = _data;\n      var i = 0;\n\n      while (i + 1 < s.length) {\n        buffer.put(getCode(s.charAt(i)) * 45 + getCode(s.charAt(i + 1)), 11);\n        i += 2;\n      }\n\n      if (i < s.length) {\n        buffer.put(getCode(s.charAt(i)), 6);\n      }\n    };\n\n    var getCode = function (c) {\n      if (\"0\" <= c && c <= \"9\") {\n        return c.charCodeAt(0) - \"0\".charCodeAt(0);\n      } else if (\"A\" <= c && c <= \"Z\") {\n        return c.charCodeAt(0) - \"A\".charCodeAt(0) + 10;\n      } else {\n        switch (c) {\n          case \" \":\n            return 36;\n\n          case \"$\":\n            return 37;\n\n          case \"%\":\n            return 38;\n\n          case \"*\":\n            return 39;\n\n          case \"+\":\n            return 40;\n\n          case \"-\":\n            return 41;\n\n          case \".\":\n            return 42;\n\n          case \"/\":\n            return 43;\n\n          case \":\":\n            return 44;\n\n          default:\n            throw \"illegal char :\" + c;\n        }\n      }\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // qr8BitByte\n  //---------------------------------------------------------------------\n\n\n  var qr8BitByte = function (data) {\n    var _mode = QRMode.MODE_8BIT_BYTE;\n    var _data = data;\n\n    var _bytes = qrcode.stringToBytes(data);\n\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return _bytes.length;\n    };\n\n    _this.write = function (buffer) {\n      for (var i = 0; i < _bytes.length; i += 1) {\n        buffer.put(_bytes[i], 8);\n      }\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // qrKanji\n  //---------------------------------------------------------------------\n\n\n  var qrKanji = function (data) {\n    var _mode = QRMode.MODE_KANJI;\n    var _data = data;\n    var stringToBytes = qrcode.stringToBytesFuncs[\"SJIS\"];\n\n    if (!stringToBytes) {\n      throw \"sjis not supported.\";\n    }\n\n    !function (c, code) {\n      // self test for sjis support.\n      var test = stringToBytes(c);\n\n      if (test.length != 2 || (test[0] << 8 | test[1]) != code) {\n        throw \"sjis not supported.\";\n      }\n    }(\"\\u53cb\", 0x9746);\n\n    var _bytes = stringToBytes(data);\n\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return ~~(_bytes.length / 2);\n    };\n\n    _this.write = function (buffer) {\n      var data = _bytes;\n      var i = 0;\n\n      while (i + 1 < data.length) {\n        var c = (0xff & data[i]) << 8 | 0xff & data[i + 1];\n\n        if (0x8140 <= c && c <= 0x9ffc) {\n          c -= 0x8140;\n        } else if (0xe040 <= c && c <= 0xebbf) {\n          c -= 0xc140;\n        } else {\n          throw \"illegal char at \" + (i + 1) + \"/\" + c;\n        }\n\n        c = (c >>> 8 & 0xff) * 0xc0 + (c & 0xff);\n        buffer.put(c, 13);\n        i += 2;\n      }\n\n      if (i < data.length) {\n        throw \"illegal char at \" + (i + 1);\n      }\n    };\n\n    return _this;\n  }; //=====================================================================\n  // GIF Support etc.\n  //\n  //---------------------------------------------------------------------\n  // byteArrayOutputStream\n  //---------------------------------------------------------------------\n\n\n  var byteArrayOutputStream = function () {\n    var _bytes = [];\n    var _this = {};\n\n    _this.writeByte = function (b) {\n      _bytes.push(b & 0xff);\n    };\n\n    _this.writeShort = function (i) {\n      _this.writeByte(i);\n\n      _this.writeByte(i >>> 8);\n    };\n\n    _this.writeBytes = function (b, off, len) {\n      off = off || 0;\n      len = len || b.length;\n\n      for (var i = 0; i < len; i += 1) {\n        _this.writeByte(b[i + off]);\n      }\n    };\n\n    _this.writeString = function (s) {\n      for (var i = 0; i < s.length; i += 1) {\n        _this.writeByte(s.charCodeAt(i));\n      }\n    };\n\n    _this.toByteArray = function () {\n      return _bytes;\n    };\n\n    _this.toString = function () {\n      var s = \"\";\n      s += \"[\";\n\n      for (var i = 0; i < _bytes.length; i += 1) {\n        if (i > 0) {\n          s += \",\";\n        }\n\n        s += _bytes[i];\n      }\n\n      s += \"]\";\n      return s;\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // base64EncodeOutputStream\n  //---------------------------------------------------------------------\n\n\n  var base64EncodeOutputStream = function () {\n    var _buffer = 0;\n    var _buflen = 0;\n    var _length = 0;\n    var _base64 = \"\";\n    var _this = {};\n\n    var writeEncoded = function (b) {\n      _base64 += String.fromCharCode(encode(b & 0x3f));\n    };\n\n    var encode = function (n) {\n      if (n < 0) {// error.\n      } else if (n < 26) {\n        return 0x41 + n;\n      } else if (n < 52) {\n        return 0x61 + (n - 26);\n      } else if (n < 62) {\n        return 0x30 + (n - 52);\n      } else if (n == 62) {\n        return 0x2b;\n      } else if (n == 63) {\n        return 0x2f;\n      }\n\n      throw \"n:\" + n;\n    };\n\n    _this.writeByte = function (n) {\n      _buffer = _buffer << 8 | n & 0xff;\n      _buflen += 8;\n      _length += 1;\n\n      while (_buflen >= 6) {\n        writeEncoded(_buffer >>> _buflen - 6);\n        _buflen -= 6;\n      }\n    };\n\n    _this.flush = function () {\n      if (_buflen > 0) {\n        writeEncoded(_buffer << 6 - _buflen);\n        _buffer = 0;\n        _buflen = 0;\n      }\n\n      if (_length % 3 != 0) {\n        // padding\n        var padlen = 3 - _length % 3;\n\n        for (var i = 0; i < padlen; i += 1) {\n          _base64 += \"=\";\n        }\n      }\n    };\n\n    _this.toString = function () {\n      return _base64;\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // base64DecodeInputStream\n  //---------------------------------------------------------------------\n\n\n  var base64DecodeInputStream = function (str) {\n    var _str = str;\n    var _pos = 0;\n    var _buffer = 0;\n    var _buflen = 0;\n    var _this = {};\n\n    _this.read = function () {\n      while (_buflen < 8) {\n        if (_pos >= _str.length) {\n          if (_buflen == 0) {\n            return -1;\n          }\n\n          throw \"unexpected end of file./\" + _buflen;\n        }\n\n        var c = _str.charAt(_pos);\n\n        _pos += 1;\n\n        if (c == \"=\") {\n          _buflen = 0;\n          return -1;\n        } else if (c.match(/^\\s$/)) {\n          // ignore if whitespace.\n          continue;\n        }\n\n        _buffer = _buffer << 6 | decode(c.charCodeAt(0));\n        _buflen += 6;\n      }\n\n      var n = _buffer >>> _buflen - 8 & 0xff;\n      _buflen -= 8;\n      return n;\n    };\n\n    var decode = function (c) {\n      if (0x41 <= c && c <= 0x5a) {\n        return c - 0x41;\n      } else if (0x61 <= c && c <= 0x7a) {\n        return c - 0x61 + 26;\n      } else if (0x30 <= c && c <= 0x39) {\n        return c - 0x30 + 52;\n      } else if (c == 0x2b) {\n        return 62;\n      } else if (c == 0x2f) {\n        return 63;\n      } else {\n        throw \"c:\" + c;\n      }\n    };\n\n    return _this;\n  }; //---------------------------------------------------------------------\n  // gifImage (B/W)\n  //---------------------------------------------------------------------\n\n\n  var gifImage = function (width, height) {\n    var _width = width;\n    var _height = height;\n\n    var _data = new Array(width * height);\n\n    var _this = {};\n\n    _this.setPixel = function (x, y, pixel) {\n      _data[y * _width + x] = pixel;\n    };\n\n    _this.write = function (out) {\n      //---------------------------------\n      // GIF Signature\n      out.writeString(\"GIF87a\"); //---------------------------------\n      // Screen Descriptor\n\n      out.writeShort(_width);\n      out.writeShort(_height);\n      out.writeByte(0x80); // 2bit\n\n      out.writeByte(0);\n      out.writeByte(0); //---------------------------------\n      // Global Color Map\n      // black\n\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n      out.writeByte(0x00); // white\n\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n      out.writeByte(0xff); //---------------------------------\n      // Image Descriptor\n\n      out.writeString(\",\");\n      out.writeShort(0);\n      out.writeShort(0);\n      out.writeShort(_width);\n      out.writeShort(_height);\n      out.writeByte(0); //---------------------------------\n      // Local Color Map\n      //---------------------------------\n      // Raster Data\n\n      var lzwMinCodeSize = 2;\n      var raster = getLZWRaster(lzwMinCodeSize);\n      out.writeByte(lzwMinCodeSize);\n      var offset = 0;\n\n      while (raster.length - offset > 255) {\n        out.writeByte(255);\n        out.writeBytes(raster, offset, 255);\n        offset += 255;\n      }\n\n      out.writeByte(raster.length - offset);\n      out.writeBytes(raster, offset, raster.length - offset);\n      out.writeByte(0x00); //---------------------------------\n      // GIF Terminator\n\n      out.writeString(\";\");\n    };\n\n    var bitOutputStream = function (out) {\n      var _out = out;\n      var _bitLength = 0;\n      var _bitBuffer = 0;\n      var _this = {};\n\n      _this.write = function (data, length) {\n        if (data >>> length != 0) {\n          throw \"length over\";\n        }\n\n        while (_bitLength + length >= 8) {\n          _out.writeByte(0xff & (data << _bitLength | _bitBuffer));\n\n          length -= 8 - _bitLength;\n          data >>>= 8 - _bitLength;\n          _bitBuffer = 0;\n          _bitLength = 0;\n        }\n\n        _bitBuffer = data << _bitLength | _bitBuffer;\n        _bitLength = _bitLength + length;\n      };\n\n      _this.flush = function () {\n        if (_bitLength > 0) {\n          _out.writeByte(_bitBuffer);\n        }\n      };\n\n      return _this;\n    };\n\n    var getLZWRaster = function (lzwMinCodeSize) {\n      var clearCode = 1 << lzwMinCodeSize;\n      var endCode = (1 << lzwMinCodeSize) + 1;\n      var bitLength = lzwMinCodeSize + 1; // Setup LZWTable\n\n      var table = lzwTable();\n\n      for (var i = 0; i < clearCode; i += 1) {\n        table.add(String.fromCharCode(i));\n      }\n\n      table.add(String.fromCharCode(clearCode));\n      table.add(String.fromCharCode(endCode));\n      var byteOut = byteArrayOutputStream();\n      var bitOut = bitOutputStream(byteOut); // clear code\n\n      bitOut.write(clearCode, bitLength);\n      var dataIndex = 0;\n      var s = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n\n      while (dataIndex < _data.length) {\n        var c = String.fromCharCode(_data[dataIndex]);\n        dataIndex += 1;\n\n        if (table.contains(s + c)) {\n          s = s + c;\n        } else {\n          bitOut.write(table.indexOf(s), bitLength);\n\n          if (table.size() < 0xfff) {\n            if (table.size() == 1 << bitLength) {\n              bitLength += 1;\n            }\n\n            table.add(s + c);\n          }\n\n          s = c;\n        }\n      }\n\n      bitOut.write(table.indexOf(s), bitLength); // end code\n\n      bitOut.write(endCode, bitLength);\n      bitOut.flush();\n      return byteOut.toByteArray();\n    };\n\n    var lzwTable = function () {\n      var _map = {};\n      var _size = 0;\n      var _this = {};\n\n      _this.add = function (key) {\n        if (_this.contains(key)) {\n          throw \"dup key:\" + key;\n        }\n\n        _map[key] = _size;\n        _size += 1;\n      };\n\n      _this.size = function () {\n        return _size;\n      };\n\n      _this.indexOf = function (key) {\n        return _map[key];\n      };\n\n      _this.contains = function (key) {\n        return typeof _map[key] != \"undefined\";\n      };\n\n      return _this;\n    };\n\n    return _this;\n  };\n\n  var createDataURL = function (width, height, getPixel) {\n    var gif = gifImage(width, height);\n\n    for (var y = 0; y < height; y += 1) {\n      for (var x = 0; x < width; x += 1) {\n        gif.setPixel(x, y, getPixel(x, y));\n      }\n    }\n\n    var b = byteArrayOutputStream();\n    gif.write(b);\n    var base64 = base64EncodeOutputStream();\n    var bytes = b.toByteArray();\n\n    for (var i = 0; i < bytes.length; i += 1) {\n      base64.writeByte(bytes[i]);\n    }\n\n    base64.flush();\n    return \"data:image/gif;base64,\" + base64;\n  }; //---------------------------------------------------------------------\n  // returns qrcode function.\n\n\n  return qrcode;\n}(); // multibyte support\n\n\n!function () {\n  qrcode.stringToBytesFuncs[\"UTF-8\"] = function (s) {\n    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n    function toUTF8Array(str) {\n      var utf8 = [];\n\n      for (var i = 0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {\n          utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n        } else if (charcode < 0xd800 || charcode >= 0xe000) {\n          utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n        } // surrogate pair\n        else {\n            i++; // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n\n            charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n            utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n          }\n      }\n\n      return utf8;\n    }\n\n    return toUTF8Array(s);\n  };\n}();\n\n(function (factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function () {\n  return qrcode;\n});\n\n//# sourceURL=webpack:///./src/qrcode.js?");

/***/ })

}]);