(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[23],{

/***/ "./src/ninja.bulkwallet.js":
/*!*********************************!*\
  !*** ./src/ninja.bulkwallet.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = async function () {\n  const translator = await __webpack_require__.e(/*! import() */ 9).then(__webpack_require__.t.bind(null, /*! ./ninja.translator.js */ \"./src/ninja.translator.js\", 7));\n  const privateKey = await Promise.all(/*! import() */[__webpack_require__.e(0), __webpack_require__.e(15)]).then(__webpack_require__.t.bind(null, /*! ./ninja.privatekey.js */ \"./src/ninja.privatekey.js\", 7));\n  let csv = [];\n  let csvRowsRemaining = null; // use to keep track of how many rows are left to process when building a large CSV array\n\n  let csvRowLimit = 0;\n  let csvStartIndex = 0;\n  let publicMode = 0;\n\n  const open = function () {\n    document.getElementById(\"bulkarea\").style.display = \"block\"; // show a default CSV list if the text area is empty\n\n    if (document.getElementById(\"bulktextarea\").value === \"\") {\n      // return control of the thread to the browser to render the tab switch UI then build a default CSV list\n      setTimeout(function () {\n        buildCSV(3, 1);\n      }, 50);\n    }\n  };\n\n  const close = function () {\n    document.getElementById(\"bulkarea\").style.display = \"none\";\n  }; // use this function to bulk generate addresses\n  // rowLimit: number of Bitcoin Addresses to generate\n  // startIndex: add this number to the row index for output purposes\n  // returns:\n  // index,bitcoinAddress,privateKeyWif\n\n\n  const buildCSV = function (rowLimit, startIndex) {\n    //const bulkWallet = bulkwallet;\n    document.getElementById(\"bulktextarea\").value = translator.get(\"bulkgeneratingaddresses\") + rowLimit;\n    csv = [];\n    csvRowLimit = rowLimit;\n    csvRowsRemaining = rowLimit;\n    csvStartIndex = --startIndex;\n    setTimeout(batchCSV, 0, publicMode);\n  };\n\n  const batchCSV = function () {\n    if (csvRowsRemaining > 0) {\n      csvRowsRemaining--;\n      const key = privateKey.makeRandom();\n      csv.push(csvRowLimit - csvRowsRemaining + csvStartIndex + ',\"' + privateKey.getAddressWith(key, publicMode) + '\",\"' + privateKey.getWIFForAddress(key, publicMode) + '\"');\n      document.getElementById(\"bulktextarea\").value = translator.get(\"bulkgeneratingaddresses\") + csvRowsRemaining; // release thread to browser to render UI\n\n      setTimeout(batchCSV, 0, publicMode);\n    } // processing is finished so put CSV in text area\n    else if (csvRowsRemaining === 0) {\n        document.getElementById(\"bulktextarea\").value = csv.join(\"\\n\");\n      }\n  };\n\n  const openCloseFaq = function (faqNum) {\n    // do close\n    if (document.getElementById(\"bulka\" + faqNum).style.display === \"block\") {\n      document.getElementById(\"bulka\" + faqNum).style.display = \"none\";\n      document.getElementById(\"bulke\" + faqNum).setAttribute(\"class\", \"more\");\n    } // do open\n    else {\n        document.getElementById(\"bulka\" + faqNum).style.display = \"block\";\n        document.getElementById(\"bulke\" + faqNum).setAttribute(\"class\", \"less\");\n      }\n  };\n\n  const result = {\n    open,\n    close,\n    buildCSV,\n    batchCSV,\n    openCloseFaq\n  };\n  Object.defineProperty(result, \"publicMode\", {\n    enumerable: true,\n    get: () => publicMode,\n    set: pm => {\n      publicMode = pm;\n    }\n  });\n  return result;\n}();\n\nmodule.exports.__esModule = true;\n\n//# sourceURL=webpack:///./src/ninja.bulkwallet.js?");

/***/ })

}]);