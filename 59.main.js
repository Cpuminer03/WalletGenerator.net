(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[59],{

/***/ "./src/coins/ethereum.js":
/*!*******************************!*\
  !*** ./src/coins/ethereum.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = async function () {\n  const ethWallet = (await Promise.all(/*! import() */[__webpack_require__.e(1), __webpack_require__.e(2), __webpack_require__.e(3), __webpack_require__.e(5), __webpack_require__.e(6), __webpack_require__.e(7), __webpack_require__.e(4), __webpack_require__.e(27), __webpack_require__.e(36), __webpack_require__.e(40)]).then(__webpack_require__.t.bind(null, /*! ethereumjs-wallet */ \"./node_modules/ethereumjs-wallet/dist/index.js\", 7))).default;\n  const Coin = await __webpack_require__.e(/*! import() */ 12).then(__webpack_require__.t.bind(null, /*! ./coin */ \"./src/coins/coin.js\", 7));\n  return class Ethereum extends Coin {\n    constructor(name, donate) {\n      super(name, donate);\n    }\n\n    create(d, Q, opts) {\n      if (d) {\n        return ethWallet.fromPrivateKey(d.toBuffer());\n      }\n\n      return ethWallet.fromPublicKey(Q, true);\n    }\n\n    makeRandom(opts) {\n      return ethWallet.generate();\n    }\n\n    isPrivateKey(key) {\n      key = `${key}`.toLowerCase();\n\n      if (key.startsWith(\"0x\")) {\n        key = key.slice(2);\n      }\n\n      return /^[0-9a-f]{64}$/.test(key);\n    }\n\n    decodePrivateKey(key) {\n      key = `${key}`.toLowerCase();\n\n      if (key.startsWith(\"0x\")) {\n        key = key.slice(2);\n      }\n\n      return ethWallet.fromPrivateKey(Buffer.from(key, \"hex\"));\n    } // correspond to getAddressFormatNames, getAddressTitleNames\n\n\n    getAddressWith(key, mode) {\n      switch (mode) {\n        default:\n          return key.getChecksumAddressString();\n      }\n    } // correspond to getAddressFormatNames, getAddressTitleNames\n\n\n    getWIFForAddress(key, mode) {\n      switch (mode) {\n        default:\n          return \"0x\" + key.getPrivateKey().toString(\"hex\");\n      }\n    } // correspond to getWIFTitleNames\n\n\n    getWIFByType(key, mode) {\n      switch (mode) {\n        default:\n          return \"0x\" + key.getPrivateKey().toString(\"hex\");\n      }\n    }\n\n    getAddressFormatNames() {\n      return [\"Normal\"];\n    }\n\n    getAddressTitleNames() {\n      return [\"Public Address\"];\n    }\n\n    getWIFTitleNames() {\n      return [\"Private Key\"];\n    }\n\n    getPublicKey(key, compressed) {\n      return key.getPublicKey();\n    }\n\n    getPrivateKeyBuffer(key) {\n      return key.getPrivateKey();\n    }\n\n    havePrivateKey(key) {\n      return !!key.getPrivateKey();\n    }\n\n    isVanitygenPossible(pattern, mode) {\n      const regex = /^(?:0[Xx])?[0-9a-fA-F]{0,40}$/;\n      return regex.test(pattern);\n    }\n\n    testVanitygenMatch(pattern, address, mode) {\n      pattern = pattern.toLowerCase().replace(/^0[Xx]/, \"\");\n      address = address.toLowerCase().replace(/^0[Xx]/, \"\");\n      return address.startsWith(pattern);\n    }\n\n  };\n}();\n\nmodule.exports.__esModule = true;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/node-libs-browser/node_modules/buffer/index.js */ \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./src/coins/ethereum.js?");

/***/ })

}]);