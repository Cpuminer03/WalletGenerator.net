(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[63],{

/***/ "./src/coins/zcash/sapling.js":
/*!************************************!*\
  !*** ./src/coins/zcash/sapling.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = async function () {\n  // DO NOT EDIT WHEN YOU ADD A NEW COIN\n  const Coin = await __webpack_require__.e(/*! import() */ 12).then(__webpack_require__.t.bind(null, /*! ../coin */ \"./src/coins/coin.js\", 7));\n  return class ZcashSapling extends Coin {\n    constructor(name, donate) {\n      super(name, donate);\n    }\n    /**\n     * Create a keypair from specific scalar\n     * @param {bigi} d Scalar value from \"bigi\" package\n     * @param {null} Q Unused, used to be public key\n     * @param {object} opts Options to be passed\n     *  */\n\n\n    create(d, Q, opts) {}\n    /**\n     * Create a random keypair\n     * @param {object} opts Options to be passed\n     *  */\n\n\n    makeRandom(opts) {}\n    /**\n     * Check if a given key is a valid private key string\n     * @param {string} key Possible private key\n     *  */\n\n\n    isPrivateKey(key) {}\n    /**\n     * Decode private key string into keypair\n     * @param {string} key Private key string\n     *  */\n\n\n    decodePrivateKey(key) {} // correspond to getAddressFormatNames, getAddressTitleNames\n\n    /**\n     * Calculate an address from keypair\n     * Mode number correspond to index of arrays returned from getAddressFormatNames and getAddressTitleNames\n     * @param {object} key Keypair\n     * @param {number} mode Mode number\n     *  */\n\n\n    getAddressWith(key, mode) {} // correspond to getAddressFormatNames, getAddressTitleNames\n\n    /**\n     * Convert private key string from keypair\n     * Mode number correspond to index of arrays returned from getAddressFormatNames and getAddressTitleNames\n     * @param {object} key Keypair\n     * @param {number} mode Mode number\n     *  */\n\n\n    getWIFForAddress(key, mode) {} // correspond to getWIFTitleNames\n\n    /**\n     * Convert private key string from keypair\n     * Mode number correspond to index of arrays returned from getWIFTitleNames\n     * @param {object} key Keypair\n     * @param {number} mode Mode number\n     *  */\n\n\n    getWIFByType(key, mode) {}\n    /**\n     * Used at address mode dropdown\n     * */\n\n\n    getAddressFormatNames() {\n      return [];\n    }\n    /**\n     * Used at Single Wallet tab and public part of Detail Wallet tab\n     * */\n\n\n    getAddressTitleNames() {\n      return [];\n    }\n    /**\n     * Used at private part of Detail Wallet tab\n     * */\n\n\n    getWIFTitleNames() {\n      return [];\n    }\n    /**\n     * Get public key from keypair\n     * @param {object} key Keypair\n     * @param {boolean} compressed Is a compressed public key?\n     * */\n\n\n    getPublicKey(key, compressed) {}\n    /**\n     * Get private key Buffer value from keypair\n     * @param {object} key Keypair\n     * */\n\n\n    getPrivateKeyBuffer(key) {}\n    /**\n     * Does the keypair has private key?\n     * @param {object} key Keypair\n     * */\n\n\n    havePrivateKey(key) {}\n    /**\n     * Check patten is valid for vanitygen, return true if pattern can be a beginning of any address.\n     * @param {string} pattern Possible partial address\n     * @param {number} mode Mode number corresponding to index of arrays returned from getAddressFormatNames and getAddressTitleNames\n     * */\n\n\n    isVanitygenPossible(pattern, mode) {}\n\n    shouldAddCoinList() {\n      return false;\n    }\n\n  };\n}();\n\nmodule.exports.__esModule = true;\n\n//# sourceURL=webpack:///./src/coins/zcash/sapling.js?");

/***/ })

}]);