(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[19],{

/***/ "./src/ninja.paperwallet.js":
/*!**********************************!*\
  !*** ./src/ninja.paperwallet.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = async function () {\n  const janin = await __webpack_require__.e(/*! import() */ 13).then(__webpack_require__.t.bind(null, /*! ./janin.currency.js */ \"./src/janin.currency.js\", 7));\n  const privateKey = await Promise.all(/*! import() */[__webpack_require__.e(0), __webpack_require__.e(15)]).then(__webpack_require__.t.bind(null, /*! ./ninja.privatekey.js */ \"./src/ninja.privatekey.js\", 7));\n  const translator = await __webpack_require__.e(/*! import() */ 9).then(__webpack_require__.t.bind(null, /*! ./ninja.translator.js */ \"./src/ninja.translator.js\", 7));\n  const qrCode = await Promise.all(/*! import() */[__webpack_require__.e(16), __webpack_require__.e(14)]).then(__webpack_require__.t.bind(null, /*! ./ninja.qrcode */ \"./src/ninja.qrcode/index.js\", 7));\n  let remaining = null; // use to keep track of how many addresses are left to process when building the paper wallet\n\n  let count = 0;\n  let batchComplete = null;\n  const pageBreakAtArtisticDefault = 1;\n  let pageBreakAt = null;\n  let publicMode = 0; // compressed\n\n  let encrypt = false;\n  let intermediatePoint = null;\n\n  const open = function () {\n    document.getElementById(\"main\").setAttribute(\"class\", \"paper\"); // add 'paper' class to main div\n\n    const paperArea = document.getElementById(\"paperarea\");\n    paperArea.style.display = \"block\";\n    pageBreakAt = pageBreakAtArtisticDefault;\n\n    if (!document.getElementById(\"paperkeyarea\").innerHTML) {\n      document.getElementById(\"paperpassphrase\").disabled = true;\n      document.getElementById(\"paperencrypt\").checked = false;\n      encrypt = false;\n      build(document.getElementById(\"paperpassphrase\").value);\n    }\n  };\n\n  const close = function () {\n    document.getElementById(\"paperarea\").style.display = \"none\";\n    document.getElementById(\"main\").setAttribute(\"class\", \"\"); // remove 'paper' class from main div\n  };\n\n  const build = function (passphrase, numWallets, _batchComplete) {\n    numWallets = numWallets || 1;\n    pageBreakAt = 1;\n    remaining = numWallets;\n    batchComplete = _batchComplete;\n    count = 0;\n    document.getElementById(\"paperkeyarea\").innerHTML = \"\";\n\n    if (encrypt) {\n      if (!passphrase) {\n        alert(translator.get(\"bip38alertpassphraserequired\"));\n        return;\n      }\n\n      document.getElementById(\"busyblock\").className = \"busy\";\n      privateKey.BIP38GenerateIntermediatePointAsync(passphrase, null, null, function (intermediate) {\n        intermediatePoint = intermediate;\n        document.getElementById(\"busyblock\").className = \"\";\n        setTimeout(batch, 0);\n      });\n    } else {\n      setTimeout(batch, 0);\n    }\n  };\n\n  const batch = function () {\n    if (remaining > 0) {\n      const paperArea = document.getElementById(\"paperkeyarea\");\n      count++;\n      const i = count;\n      const div = document.createElement(\"div\");\n      div.setAttribute(\"id\", \"keyarea\" + i);\n      div.innerHTML = templateArtisticHtml(i);\n      div.setAttribute(\"class\", \"keyarea art\");\n\n      if (paperArea.innerHTML) {\n        // page break\n        if ((i - 1) % pageBreakAt === 0 && i >= pageBreakAt) {\n          const pBreak = document.createElement(\"div\");\n          pBreak.setAttribute(\"class\", \"pagebreak\");\n          document.getElementById(\"paperkeyarea\").appendChild(pBreak);\n          div.style.pageBreakBefore = \"always\";\n        }\n      }\n\n      document.getElementById(\"paperkeyarea\").appendChild(div);\n      generateNewWallet(i);\n      remaining--;\n      setTimeout(batch, 0);\n    } else {\n      setTimeout(batchComplete, 0);\n      batchComplete = null;\n    }\n  }; // generate bitcoin address, private key, QR Code and update information in the HTML\n  // idPostFix: 1, 2, 3, etc.\n\n\n  const generateNewWallet = function (idPostFix) {\n    if (encrypt) {\n      privateKey.BIP38GenerateECAddressAsync(intermediatePoint, false, function (address, encryptedKey) {\n        showArtisticWallet(idPostFix, address, encryptedKey);\n      });\n    } else {\n      const key = privateKey.makeRandom();\n      const bitcoinAddress = privateKey.getAddressWith(key, publicMode);\n      const privateKeyWif = privateKey.getWIFForAddress(key, publicMode);\n      showArtisticWallet(idPostFix, bitcoinAddress, privateKeyWif);\n    }\n  }; // Verify that a self-entered key is valid, and compute the corresponding\n  // public address, render the wallet.\n\n\n  const testAndApplyVanityKey = function () {\n    let suppliedKey = document.getElementById(\"suppliedPrivateKey\").value;\n    suppliedKey = suppliedKey.trim(); // in case any spaces or whitespace got pasted in\n\n    document.getElementById(\"suppliedPrivateKey\").value = suppliedKey;\n\n    if (!privateKey.isPrivateKey(suppliedKey)) {\n      alert(translator.get(\"detailalertnotvalidprivatekey\"));\n    } else {\n      const parsedKey = privateKey.decodePrivateKey(suppliedKey);\n      const computedPublicAddress = privateKey.getAddressWith(parsedKey, publicMode);\n      suppliedKey = privateKey.getWIFForAddress(parsedKey, publicMode);\n\n      if (encrypt) {\n        document.getElementById(\"busyblock\").className = \"busy\";\n        privateKey.BIP38PrivateKeyToEncryptedKeyAsync(suppliedKey, document.getElementById(\"paperpassphrase\").value, false, function (encodedKey) {\n          document.getElementById(\"busyblock\").className = \"\";\n          showArtisticWallet(1, computedPublicAddress, encodedKey);\n        });\n      } else {\n        showArtisticWallet(1, computedPublicAddress, suppliedKey);\n      }\n    }\n  };\n\n  const templateArtisticHtml = function (i) {\n    return janin.selectedCurrency.templateArtisticHtml(i, publicMode);\n  };\n\n  const showArtisticWallet = function (idPostFix, bitcoinAddress, privKey) {\n    const keyValuePair = {};\n    keyValuePair[\"qrcode_public\" + idPostFix] = bitcoinAddress;\n    keyValuePair[\"qrcode_private\" + idPostFix] = privKey;\n    qrCode.showQrCode(keyValuePair, qrCode.sizeMultiplier.proportional(41, 2.8));\n    document.getElementById(\"btcaddress\" + idPostFix).innerHTML = bitcoinAddress;\n    document.getElementById(\"btcprivwif\" + idPostFix).innerHTML = privKey;\n  };\n\n  const toggleEncrypt = function (element) {\n    // enable/disable passphrase textbox\n    document.getElementById(\"paperpassphrase\").disabled = !element.checked;\n    encrypt = element.checked;\n    resetLimits();\n  };\n\n  const resetLimits = function () {\n    const paperEncrypt = document.getElementById(\"paperencrypt\");\n    document.getElementById(\"paperkeyarea\").style.fontSize = \"100%\";\n\n    if (paperEncrypt.checked) {\n      // reduce font size\n      document.getElementById(\"paperkeyarea\").style.fontSize = \"95%\";\n    }\n  };\n\n  const result = {\n    open,\n    close,\n    build,\n    batch,\n    generateNewWallet,\n    testAndApplyVanityKey,\n    templateArtisticHtml,\n    showArtisticWallet,\n    toggleEncrypt,\n    resetLimits\n  };\n  Object.defineProperty(result, \"publicMode\", {\n    enumerable: true,\n    get: () => publicMode,\n    set: pm => {\n      publicMode = pm;\n    }\n  });\n  return result;\n}();\n\nmodule.exports.__esModule = true;\n\n//# sourceURL=webpack:///./src/ninja.paperwallet.js?");

/***/ })

}]);